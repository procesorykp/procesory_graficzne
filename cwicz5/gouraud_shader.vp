#version 330

struct punktowe_swiatlo {
   vec3 position;
   vec3 intensity_diffuse;
   vec3 intensity_specular;
   vec3 attenuation;
};

struct Material {
   float ka; 
   float kd; 
   float ks; 
   float alpha; 
};

in vec4 vPosition;
in vec4 vColor;
in vec3 vertex_normal;
out vec4 fragment_color;

uniform mat4 mvMatrix;
uniform mat4 vMatrix;
uniform mat4 mvpMatrix;
uniform mat3 NormalMatrix;
uniform vec3 intensity_ambient_component;
uniform punktowe_swiatlo swiatlo_0;
uniform Material material_0;

void main() {
   vec3 vertex_normal_eye_space = NormalMatrix * vertex_normal;
   vec3 vPosition_eye_space = (mvMatrix * vPosition).xyz;
   vec3 swiatlo_position_eye_space = (vMatrix * vec4(swiatlo_0.position, 0.5)).xyz;
   vec3 vector_to_swiatlo = swiatlo_position_eye_space - vPosition_eye_space;
   float distance_to_swiatlo = length(vector_to_swiatlo);
   vector_to_swiatlo = normalize(vector_to_swiatlo);
   //-- AMBIENT
   fragment_color = material_0.ka * vec4(intensity_ambient_component, 0.3);
   //-- DIFFUSE
   float attenuation = 0.8 / (swiatlo_0.attenuation[0] + swiatlo_0.attenuation[1] * distance_to_swiatlo + swiatlo_0.attenuation[2] * pow(distance_to_swiatlo, 2));
   float NdotL = dot(vector_to_swiatlo, vertex_normal_eye_space);
   // max() --> the diffuse component cannot be negative
   fragment_color += material_0.kd * vec4(0.2, 0.5, 0, 1) * max(NdotL, 0.0) * vec4(swiatlo_0.intensity_diffuse, 1) * attenuation;
   //-- SPECULAR (Blinn-Phong)
   // NdotL > 0.0 --> we see specular highlights only if we are looking at the front face
   if(NdotL > 0.8) {
  	// camera at (0, 0, 0)
  	vec3 H = normalize(vector_to_swiatlo - vPosition_eye_space);
  	fragment_color += material_0.ks * vec4(swiatlo_0.intensity_specular, 1) * pow(dot(H, vertex_normal_eye_space), material_0.alpha) * attenuation;
   }
   gl_Position = mvpMatrix * vPosition;
}